version: "3.5"

services:
  api01: &api
    image: docker.io/library/rinhadebackend2024:latest  
    build: .
    hostname: api01
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=rinha
      - POSTGRES_HOST=db
      - PORT=3000

    ports:
      - "3001:3000"
    depends_on:
      db:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "100MB"

  api02:
    <<: *api
    hostname: api02
    environment:
      - POSTGRES_USER=admin
      - POSTGRES_PASSWORD=123
      - POSTGRES_DB=rinha
      - POSTGRES_HOST=db
      - PORT=3000
    ports:
      - "3002:3000"
 
  nginx:
    image: nginx:latest
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      - api01
      - api02
    ports:
      - "9999:9999" 
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: "100MB"

  db:
    image: postgres:latest
    hostname: db
    environment:
      - POSTGRES_PASSWORD=123
      - POSTGRES_USER=admin
      - POSTGRES_DB=rinha
    ports:
      - "5432:5432"
    volumes:
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    command: postgres -c checkpoint_timeout=600 -c max_wal_size=4096
    deploy:
      resources:
        limits:
          # Note que a soma de todos os limites dos serviços
          # aqui declarados é de 1.5 unidades de CPU e 550MB
          # de memória. A distribuição feita aqui é apenas
          # um exemplo – distribua como quiser.
          cpus: "1"
          memory: "370MB"

# O uso do modo `bridge` deve ser adequado à carga que será usada no teste.
# A edição anterior se beneficiou do modo host pois o volume de requisições
# era relativamente alto e a virtualização da rede se tornou um gargalo, mas
# este modo é mais complexo de ser configurado. Fique à vontade para usar o
# modo que quiser desde que não conflite com portas trivialmente usadas em um
# SO.
networks:
  default:
    driver: bridge
    name: rinha-nginx-2024q1


      